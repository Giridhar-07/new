name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Type checking
      run: npm run type-check

    - name: Lint check
      run: npm run lint

    - name: Run tests
      run: npm test -- --coverage
      env:
        CI: true

    - name: Build project
      run: npm run build
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
        REACT_APP_GEMINI_API_KEY: ${{ secrets.REACT_APP_GEMINI_API_KEY }}

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: frontend
        fail_ci_if_error: true

    - name: Cache build
      uses: actions/cache@v3
      with:
        path: |
          build
          node_modules
        key: ${{ runner.os }}-build-${{ github.sha }}

  security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Run SAST scan
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    - name: Perform analysis
      uses: github/codeql-action/analyze@v2

    - name: Run dependency check
      run: |
        npm audit
        npx snyk test

  deploy-staging:
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Download build artifacts
      uses: actions/cache@v3
      with:
        path: |
          build
          node_modules
        key: ${{ runner.os }}-build-${{ github.sha }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to S3 (Staging)
      run: |
        aws s3 sync build/ s3://${{ secrets.AWS_S3_BUCKET_STAGING }} --delete
        aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_ID_STAGING }} --paths "/*"

  deploy-production:
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3

    - name: Download build artifacts
      uses: actions/cache@v3
      with:
        path: |
          build
          node_modules
        key: ${{ runner.os }}-build-${{ github.sha }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to S3 (Production)
      run: |
        aws s3 sync build/ s3://${{ secrets.AWS_S3_BUCKET_PROD }} --delete
        aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_ID_PROD }} --paths "/*"

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Production deployment for commit ${{ github.sha }}
          
          Changes in this Release:
          ${{ github.event.head_commit.message }}
